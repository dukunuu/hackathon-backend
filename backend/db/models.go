// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleADMIN UserRole = "ADMIN"
	UserRoleUSER  UserRole = "USER"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type User struct {
	// Primary key, UUID
	ID pgtype.UUID
	// User's first name
	FirstName string
	// User's last name
	LastName string
	// User's 8-digit phone number (optional, unique if provided)
	Phone pgtype.Text
	// Flag indicating if the user is volunteering (default: false)
	IsVolunteering bool
	// User's email address (unique, mandatory)
	Email string
	// User's role in the system (admin or user, default: user)
	Role UserRole
	// URL to the user's profile picture or page (optional)
	ProfileUrl pgtype.Text
	// Hashed password for the user (mandatory)
	PasswordHash string
	// Timestamp of when the user record was created
	CreatedAt pgtype.Timestamptz
	// Timestamp of when the user record was last updated
	UpdatedAt pgtype.Timestamptz
}
